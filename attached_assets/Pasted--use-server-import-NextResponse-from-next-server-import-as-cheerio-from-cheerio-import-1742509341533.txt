'use server';
import { NextResponse } from 'next/server';
import * as cheerio from 'cheerio';
import axios from 'axios';
import * as tough from 'tough-cookie';
import { wrapper } from 'axios-cookiejar-support';

const jar = new tough.CookieJar();
const client = wrapper(axios.create({ jar }));

async function fetchSearchResults(searchQuery: string) {
  try {
    const tokenResponse = await fetch('https://new4.scloud.ninja/get-search-token', {
      method: 'POST',
      headers: {
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Content-Type': 'application/x-www-form-urlencoded',
        Origin: 'https://new4.scloud.ninja',
        Referer: 'https://new4.scloud.ninja/',
        'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Dest': 'document',
      },
      body: new URLSearchParams({ search_query: searchQuery }).toString(),
      redirect: 'manual', // Prevents auto-following redirects
    });

    const locationHeader = tokenResponse.headers.get('location');
    if (!locationHeader) throw new Error('Token not found in response');

    const tokenMatch = locationHeader.match(/token=([a-f0-9-]+)/);
    if (!tokenMatch) throw new Error('Failed to extract token');

    const token = tokenMatch[1];

    // Step 2: Fetch Search Results
    const finalResponse = await fetch(`https://new4.scloud.ninja/?token=${token}`, {
      method: 'GET',
      headers: {
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'User-Agent':
          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15',
        Referer: 'https://new4.scloud.ninja/',
      },
    });

    const html = await finalResponse.text();
    return html;
  } catch (error) {
    console.error('Error fetching search results:', error);
  }
}

export async function GET(request: Request) {
  try {
    // Parse the incoming request URL
    const { searchParams } = new URL(request.url);
    // If search param isn't provided, fallback to 'mufasa'
    const query = searchParams.get('search') ?? 'mufasa';
    const decodedQuery = decodeURIComponent(query || '');
    console.log('decoded query', decodedQuery);
    console.log(`POST /api with search="${decodedQuery}"`);
    const html = await fetchSearchResults(decodedQuery);
    const data = fetchHtml(html);

    // Return raw HTML with a content type of text/html
    return new NextResponse(data, {
      status: 200,
      headers: {
        'Content-Type': 'text/json; charset=utf-8',
        'Access-Control-Allow-Credentials': 'true',
        'Access-Control-Allow-Origin': '*',
      },
    });
  } catch (error) {
    console.error('Failed to fetch data:', error);
    return NextResponse.json({ error: 'Failed to fetch data' }, { status: 500 });
  }
}

/**
 * Fetch raw HTML searching on https://new3.scloud.ninja/
 */
function fetchHtml(data: any) {
  const $ = cheerio.load(data);
  let result: { name: string; size: string; link: string }[] = [];
  const baseUrl = 'https://new3.scloud.ninja';

  $('a[href]').each((_: any, element: any) => {
    const title = $(element).find('.title-container span').text().trim();
    const size = $(element).find('span.inline-block').text().trim();
    const link = $(element).attr('href');
    const linkPart = link?.split('/').pop() ?? '';
    if (title && size && linkPart) {
      result.push({ name: title, size, link: linkPart });
    }
  });

  return JSON.stringify(result);
}
export async function POST(request: Request) {
  try {
    const { link } = await request.json();
    const query = link;
    const decodedQuery = decodeURIComponent(query || '');
    console.log('decoded query', decodedQuery);
    console.log(`POST /api with search="${decodedQuery}"`);
    const directDownloadLink = await fetchHtml_link(decodedQuery);

    // Return raw HTML with a content type of text/html
    return new Response(directDownloadLink, {
      status: 200,
      headers: { 'Content-Type': 'text/plain; charset=utf-8' },
    });
  } catch (error) {
    console.error('Failed to fetch data:', error);
    return NextResponse.json({ error: 'Failed to fetch data' }, { status: 500 });
  }
}

async function fetchHtml_link(link: string): Promise<string> {
  // Fetch the provided link
  const response = await fetch(link);
  const html = await response.text();

  // Parse HTML to find the direct download link (selector: a.block)
  const $ = cheerio.load(html);
  const downloadLink = $('a.block').attr('href');

  // Return the download link (or an empty string if not found)
  return downloadLink ?? '';
}
